{"version":3,"sources":["App.jsx","serviceWorker.js","index.jsx"],"names":["App","useState","timer","setTimer","countdown","setCountdown","startTimer","seconds","clearInterval","id","setInterval","console","log","sendNotification","body","window","Notification","className","style","textAlign","role","aria-label","Math","floor","type","onClick","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","requestPermission","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6NAwDeA,G,MApDH,WAAO,IAAD,EACUC,mBAAS,GADnB,mBACTC,EADS,KACFC,EADE,OAEkBF,mBAAS,GAF3B,mBAETG,EAFS,KAEEC,EAFF,KAIVC,EAAa,SAAAC,GACjBC,cAAcN,GACdG,EAAaE,EAAU,GAEvB,IAAME,EAAKC,aAAY,WACrBL,GAAa,SAAAD,GAAS,OAAIA,EAAY,KAClCA,GAAa,IACfO,QAAQC,IAAI,cACZJ,cAAcC,GACdI,EAAiB,oCAGlB,KAEHV,EAASM,IAGLI,EAAmB,SAAAC,GACnB,iBAAkBC,QACpB,IAAIC,aAAa,eAAM,CACrBF,UAKN,OACE,yBAAKG,UAAU,MAAMC,MAAO,CAAEC,UAAW,WACvC,4BACE,0BAAMC,KAAK,MAAMC,aAAW,UAA5B,iBAIDjB,EAAY,GACX,2BACGkB,KAAKC,MAAMnB,EAAY,IAD1B,KACiCA,EAAY,IAG/C,kBAAC,IAAD,CAAQoB,KAAK,UAAUC,QAAS,kBAAMnB,EAAW,QAAjD,SAGA,kBAAC,IAAD,CAASkB,KAAK,aACd,kBAAC,IAAD,CAAQA,KAAK,UAAUC,QAAS,kBAAMnB,EAAW,QAAjD,YCrCAoB,EAAcC,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BjC,QAAQC,IACN,iHAKEqB,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlB3B,QAAQC,IAAI,sCAGRqB,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAAC,GACLrC,QAAQqC,MAAM,4CAA6CA,MC1F7D,iBAAkBjC,QACpBC,aAAaiC,oBAGfC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDQnB,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,UAAwBzC,OAAOa,SAAS6B,MACpDC,SAAW3C,OAAOa,SAAS8B,OAIvC,OAGF3C,OAAO4C,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,UAAN,sBAEP9B,IAgEV,SAAiCM,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BtB,OAAOa,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLpC,QAAQC,IACN,oEAvFA0D,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjC1B,QAAQC,IACN,iHAMJmB,EAAgBC,EAAOC,OC9B/BE,K","file":"static/js/main.eda8d4a0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Button, Divider } from 'antd';\nimport './App.less';\n\nconst App = () => {\n  const [timer, setTimer] = useState(0);\n  const [countdown, setCountdown] = useState(0);\n\n  const startTimer = seconds => {\n    clearInterval(timer);\n    setCountdown(seconds - 1);\n\n    const id = setInterval(() => {\n      setCountdown(countdown => countdown - 1);\n      if (countdown <= 0) {\n        console.log(\"Time's up!\");\n        clearInterval(id);\n        sendNotification(\"It's time to chill for a bit!\");\n        // TODO: Play sound\n      }\n    }, 1000);\n\n    setTimer(id);\n  };\n\n  const sendNotification = body => {\n    if ('Notification' in window) {\n      new Notification('üçÖ', {\n        body,\n      });\n    }\n  };\n\n  return (\n    <div className=\"App\" style={{ textAlign: 'center' }}>\n      <h1>\n        <span role=\"img\" aria-label=\"Tomate\">\n          üçÖ\n        </span>\n      </h1>\n      {countdown > 0 && (\n        <p>\n          {Math.floor(countdown / 60)}: {countdown % 60}\n        </p>\n      )}\n      <Button type=\"primary\" onClick={() => startTimer(25 * 60)}>\n        25:00\n      </Button>\n      <Divider type=\"vertical\" />\n      <Button type=\"primary\" onClick={() => startTimer(45 * 60)}>\n        45:00\n      </Button>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Request for notifications\nif ('Notification' in window) {\n  Notification.requestPermission();\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}