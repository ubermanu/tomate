{"version":3,"sources":["App.jsx","serviceWorker.js","index.jsx","media/484344__inspectorj__bike-bell-ding-single-01-01.ogg"],"names":["Title","Typography","Text","App","seconds","useState","timer","setTimer","countdown","setCountdown","useSound","bellSfx","play","startTimer","clearInterval","id","setInterval","tmp","prevCountdown","console","log","sendNotification","tick","body","window","Notification","direction","style","textAlign","margin","role","aria-label","type","onClick","fontSize","marginTop","color","textShadow","Math","floor","toString","padStart","formatSeconds","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","requestPermission","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.2299a726.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Button, Space } from 'antd';\nimport { Typography } from 'antd';\nimport useSound from 'use-sound';\n\nimport './App.less';\nimport bellSfx from './media/484344__inspectorj__bike-bell-ding-single-01-01.ogg';\n\nconst { Title, Text } = Typography;\n\nconst App = () => {\n  const [timer, setTimer] = useState(0);\n  const [countdown, setCountdown] = useState(0);\n  const [play] = useSound(bellSfx);\n\n  const tick = timer => {\n    // countdown is not accessible in this scope, to investigate\n    let tmp = 0;\n    setCountdown(prevCountdown => (tmp = prevCountdown - 1));\n\n    if (tmp <= 0) {\n      console.log(\"Time's up!\");\n      clearInterval(timer);\n      sendNotification(\"It's time to chill for a bit!\");\n      play();\n    }\n  };\n\n  const startTimer = seconds => {\n    clearInterval(timer);\n    setCountdown(seconds - 1);\n    const id = setInterval(() => tick(id), 1000);\n    setTimer(id);\n  };\n\n  const sendNotification = body => {\n    if ('Notification' in window) {\n      new Notification('üçÖ', {\n        body,\n      });\n    }\n  };\n\n  const formatMinutes = seconds => {\n    return Math.floor(seconds / 60)\n      .toString()\n      .padStart(2, '0');\n  };\n\n  const formatSeconds = seconds => {\n    return (seconds % 60).toString().padStart(2, '0');\n  };\n\n  return (\n    <Space direction=\"vertical\" style={{ textAlign: 'center', margin: '3rem' }}>\n      <Title>\n        <span role=\"img\" aria-label=\"Tomate\">\n          üçÖ\n        </span>\n      </Title>\n      <Space>\n        <Button type=\"primary\" onClick={() => startTimer(25 * 60)}>\n          25:00\n        </Button>\n        <Button type=\"primary\" onClick={() => startTimer(45 * 60)}>\n          45:00\n        </Button>\n      </Space>\n      {countdown > 0 && (\n        <Text\n          style={{\n            fontSize: '48px',\n            marginTop: '0.5em',\n            color: 'white',\n            textShadow: '1px 1px 0 rgba(0, 0, 0, 0.4)',\n          }}\n        >\n          {formatMinutes(countdown)} : {formatSeconds(countdown)}\n        </Text>\n      )}\n    </Space>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Request for notifications\nif ('Notification' in window) {\n  Notification.requestPermission();\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/484344__inspectorj__bike-bell-ding-single-01-01.780e9069.ogg\";"],"sourceRoot":""}